{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/MongoDB-Query/", 
            "text": "MongoDB\u67e5\u8be2\n\n\nFind\u51fd\u6570\n\n\n\u6bd4\u8f83\u64cd\u4f5c\u6709\n$eq\n,\n$gt\n,\n$gte\n,\n$lt\n,\n$lte\n,\n$ne\n,\n$in\n,\n$nin\n\n\u67e5\u8be2\u65b9\u5f0f\n{ \nfield\n: { $?: \nvalue\n } }\n\n\n$eq\n\u67e5\u8be2:\n  \n{ \nfield\n: { $eq: \nvalue\n } }\n\u7b49\u4ef7\n{ field: \nvalue\n }\n\n\n\u5728find\u51fd\u6570\u4e2d\uff0c\u67e5\u627e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7528\n[]\n\u4f8b:\n{field:[\"A\",\"B\"]}\n\n\n\u67e5\u627e\u5d4c\u5957\u5143\u7d20\u5229\u7528\n.\n\u6765\u67e5\u627e\u4f8b:\n{\"item.tag\":\"A\"}\n\n\n\u903b\u8f91\u64cd\u4f5c\u7b26:\n\n\n$or\n,\n$and\n,\n$not\n,\n$nor\n\n\n{ $?: [ { \nexpression1\n }, { \nexpression2\n }, ... , { \nexpressionN\n } ] }\n\n\u6ce8\u610f\u5728\u7528\n$or\n\u67e5\u627e\u540c\u4e00\u4e2a\u5b57\u6bb5\u7684\u591a\u4e2a\u503c\u65f6,\u53ef\u4ee5\u4f7f\u7528\n$in\n\u6765\u4ee3\u66ff\n\n\n\u5143\u7d20\u67e5\u8be2:\n\n\n$exists\n,\n$type\n\n\n$exists\n\u5224\u65ad\u6587\u6863\u4e2d\u5305\u542b\u6307\u5b9a\u5b57\u6bb5\uff0c\u5176\u4e2d\u4e3atrue\u65f6\u503c\u4e3anull\u4e5f\u4f1a\u88ab\u5339\u914d\u5230\n\n{ field: { $exists: \nboolean\n } }\n\n\n$type\n\u8fd4\u56de\u6587\u6863\u4e2d\u6307\u5b9a\u5b57\u6bb5\u5c5e\u4e8e\u6307\u5b9a\u7684\u7c7b\u578b\n\n{ field: { $type: \nBSON type number\n | \nString alias\n } }\n\n\n\u4f30\u503c\u64cd\u4f5c\u7b26\n\n\n$mod\n,\n$regex\n,\n$text\n,\n$where\n\n\n$mod\n \u53d6\u6a21\uff1a\n{ field: { $mod: [ divisor, remainder ] } }\n\n\n$regex\n : \n{ \nfield\n: { $regex: /pattern/, $options: '\noptions\n' } }\n \u9009\u9879\uff1a\ni\n\u5ffd\u7565\u5927\u5c0f\u5199 \nm\n\u591a\u4e2a\u8d77\u59cb\u70b9\u5339\u914d \nx\n\u6269\u5c55 \ns\n\u5141\u8bb8'.*'\u6765\u5339\u914d\n\n$text\n \n$where\n\n\n\u5730\u7406\u4f4d\u7f6e\n\n\ngeoWithin\n \u67e5\u627e\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e\n\ngeoIntersects\n\u67e5\u627e\u6307\u5b9a\u8303\u56f4\u5185\u76f8\u4ea4\u7684\u6570\u636e\n\nnear\n \u6709\u8fd1\u5230\u8fdc\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u76f8\u8fd1\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662fGeoJSON\u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\u5750\u6807\n\nnearSphere\n\u6709\u8fd1\u5230\u8fdc\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u76f8\u8fd1\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662fGeoJSON\u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\u5750\u6807\u3002\nnearSphere\n\u7403\u9762\u8ba1\u7b97\u65b9\u5f0f\n\n\n\u6295\u5c04\n\n\n\u6295\u5c04\u64cd\u4f5c\u7b26\n$\n \n$elemMatch\n \n$meta\n \n$slice\n\n\n$\n\u64cd\u4f5c\u7b26\u8fd4\u56de\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\n$elemMatch\n \u64cd\u4f5c\u7b26\u8fd4\u56de\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u5b57\u6bb5\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n\n$meta\n\u64cd\u4f5c\u7b26\u8fd4\u56de\u6587\u672c\u76f8\u5173\u6027\u7684\u503c\n\n$slice\n\u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u5143\u7d20\n\n\n\u7d22\u5f15\u7b56\u7565\n\n\n\u521b\u5efa\u7d22\u5f15\u9700\u8981\u8003\u8651\u7684\u56e0\u7d20\n\n\n* \u5e94\u7528\u5f53\u524d\u53ca\u9884\u671f\u7684\u67e5\u8be2\u64cd\u4f5c\u7c7b\u578b\n* \u5e94\u7528\u67e5\u8be2\u7684\u8bfb\u5199\u6bd4\n* \u7cfb\u7edf\u53ef\u7528\u5185\u5b58\u60c5\u51b5\n\n\u4f18\u5316\u67e5\u8be2\u8bed\u53e5 \u5c3d\u53ef\u80fd\u7684\u5168\u8986\u76d6 \u6216\u8986\u76d6\u524d\u7f00\n\n\n\n\n\u6700\u4f73\u5224\u65ad\u65b9\u5f0f\n\n\n* \u5efa\u7acb\u4e0d\u540c\u7d22\u5f15\u5e76\u6a21\u62df\u6d4b\u8bd5\u548c\u5206\u6790\u5b9e\u9645\u8868\u73b0\n\n\n\n\n\u67e5\u8be2\u4e2d\u7d22\u5f15\u4f5c\u7528\u884c\u4e3a\n\n\n*\u7edd\u5927\u591a\u6570\u67e5\u8be2\u4ec5\u4f7f\u7528\u4e00\u4e2a\u7d22\u5f15\n*\u5f53\u67e5\u8be2\u4e2d\u5305\u62ec$or\u65f6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7d22\u5f15\n*\u67e5\u8be2\u4e0d\u540c\u5b57\u6bb5\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u7d22\u5f15\u4ea4\u66ff\u4f7f\u7528\u7684\u60c5\u51b5\n\n\n\n\n\u521b\u5efa\u6ee1\u8db3\u67e5\u8be2\u9700\u6c42\u7684\u7d22\u5f15\n\n\n*\u5982\u679c\u67e5\u8be2\u90fd\u4f7f\u7528\u76f8\u540c\u5b57\u6bb5\uff0c\u5219\u5efa\u7acb\u5355\u5b57\u6bb5\u7d22\u5f15\n*\u5982\u679c\u8fd8\u8d70\u5176\u5b83\u5b57\u6bb5\uff0c\u5219\u53ef\u5efa\u7acb\u590d\u5408\u7d22\u5f15\n    *\u4e5f\u53ef\u5206\u522b\u5efa\u7acb\u7d22\u5f15\n*\u5c3d\u53ef\u80fd\u5b9e\u73b0\u8986\u76d6\u67e5\u8be2\uff0c\u65e0\u9700\u56de\u8868\uff0c\u63d0\u5347\u6548\u7387\n\n\n\n\n\u5728\u533a\u5206\u5ea6\u9ad8\u7684\u5b57\u6bb5\u4e0a\u521b\u5efa\u7d22\u5f15\n\n\n*\u8fd9\u4e2a\u5b57\u6bb5\u51fa\u73b0\u91cd\u590d\u503c\u7684\u6982\u7387\u6bd4\u8f83\u5c0f\u3002\u901a\u8fc7\u67e5\u8be2\u6761\u4ef6\u80fd\u51c6\u786e\u7684\u67e5\u8be2\u5230\u6570\u636e\u5728\u5206\u7247\u7684\u7247\u952e\u9009\u62e9\u4e0a\u5bf9\u533a\u5206\u5ea6\u6709\u8f83\u9ad8\u8981\u6c42\n* \u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1\u7d22\u5f15\u90fd\u5c3d\u53ef\u80fd\u7684\u653e\u5165\u5185\u5b58\u51cf\u5c11IO \n\n\n\n\n\u4f7f\u7528\u7d22\u5f15\u8fdb\u884c\u7ed3\u679c\u6392\u5e8f\n\n\n    *\u5373\u5e26\u6392\u5e8f\u7684\u67e5\u8be2\u662f\u5426\u8d70\u7d22\u5f15\u67e5\u8be2\n        *\u4e0d\u8d70\u7d22\u5f15\u7684\u5185\u5b58\u6392\u5e8f\uff0c\u4f7f\u7528\u5185\u5b58\u91cf\u4e0d\u80fd\u8d85\u8fc732MB\n    *\u5355\u5b57\u6bb5\u7d22\u5f15\u6392\u5e8f\uff0c\u7d22\u5f15\u5339\u914d\u5373\u53ef\n        *\u53ef\u5347\u5e8f\u3001\u964d\u5e8f\n    *\u590d\u5408\u7d22\u5f15\u8981\u6ce8\u610f\u6392\u5e8f\u987a\u5e8f\uff0c\u5982{a:1,b:1}\n        *{a:1,b:1} OK\n        *{b:1,a:1} NO\n        *{a:-1,b:-1}OK\n        *{a:1,b:-1} NO\n        *{a:-1,b:1} NO\n    *\u4f7f\u7528\u7d22\u5f15\u524d\u7f00\u67e5\u8be2\uff0c{a:1,b:1,c:1,d:1}\n        *db.data.find().sort({a:1})  prefix{a:1}\n        *db.data.find().sort({a:-1}) prefix{a:1}\n        *db.data.find().sort({a:1,b:1}) prefix{a:1,b:1}\n        *db.data.find().sort({a:-1,b:-1}) prefix{a:1,b:1}\n        *db.data.find().sort({a:1,b:1,c:1}) prefix{a:1,b:1}\n        *db.data.find({a:{$gt:4}).sort({a:1,b:1}) prefix{a:1,b:1}\n        *db.data.find({a:5}).sort({b:1,c:1}) prefix {a:1,b:1,c:1}\n        *db.data.find({b:3,a:4}).sort({c:1}) prefix{a:1,b:1,c:1}\n        *db.data.find({a:5,b:{$lt:3}}).sort({b:1}) prefix{a:1,b:1}\n        *db.data.find({a:{$gt:2}}).sort({c:1}) \u67e5\u8be2\u6761\u4ef6a\u80fd\u8d70\u7d22\u5f15\uff0c\u6392\u5e8f\u5219\u4e0d\u80fd\n        *db.data.find({c:5}).sort({c:1}) \u67e5\u8be2\u6761\u4ef6\u548c\u6392\u5e8f\u90fd\u4e0d\u80fd\u6392\u5e8f", 
            "title": "Query"
        }, 
        {
            "location": "/MongoDB-Query/#mongodb", 
            "text": "", 
            "title": "MongoDB\u67e5\u8be2"
        }, 
        {
            "location": "/MongoDB-Query/#find", 
            "text": "\u6bd4\u8f83\u64cd\u4f5c\u6709 $eq , $gt , $gte , $lt , $lte , $ne , $in , $nin \n\u67e5\u8be2\u65b9\u5f0f {  field : { $?:  value  } }  $eq \u67e5\u8be2:\n   {  field : { $eq:  value  } } \u7b49\u4ef7 { field:  value  }", 
            "title": "Find\u51fd\u6570"
        }, 
        {
            "location": "/MongoDB-Query/#findfieldab", 
            "text": "\u67e5\u627e\u5d4c\u5957\u5143\u7d20\u5229\u7528 . \u6765\u67e5\u627e\u4f8b: {\"item.tag\":\"A\"}", 
            "title": "\u5728find\u51fd\u6570\u4e2d\uff0c\u67e5\u627e\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u7528[]\u4f8b:{field:[\"A\",\"B\"]}"
        }, 
        {
            "location": "/MongoDB-Query/#_1", 
            "text": "$or , $and , $not , $nor  { $?: [ {  expression1  }, {  expression2  }, ... , {  expressionN  } ] } \n\u6ce8\u610f\u5728\u7528 $or \u67e5\u627e\u540c\u4e00\u4e2a\u5b57\u6bb5\u7684\u591a\u4e2a\u503c\u65f6,\u53ef\u4ee5\u4f7f\u7528 $in \u6765\u4ee3\u66ff", 
            "title": "\u903b\u8f91\u64cd\u4f5c\u7b26:"
        }, 
        {
            "location": "/MongoDB-Query/#_2", 
            "text": "$exists , $type  $exists \u5224\u65ad\u6587\u6863\u4e2d\u5305\u542b\u6307\u5b9a\u5b57\u6bb5\uff0c\u5176\u4e2d\u4e3atrue\u65f6\u503c\u4e3anull\u4e5f\u4f1a\u88ab\u5339\u914d\u5230 { field: { $exists:  boolean  } }  $type \u8fd4\u56de\u6587\u6863\u4e2d\u6307\u5b9a\u5b57\u6bb5\u5c5e\u4e8e\u6307\u5b9a\u7684\u7c7b\u578b { field: { $type:  BSON type number  |  String alias  } }", 
            "title": "\u5143\u7d20\u67e5\u8be2:"
        }, 
        {
            "location": "/MongoDB-Query/#_3", 
            "text": "$mod , $regex , $text , $where  $mod  \u53d6\u6a21\uff1a { field: { $mod: [ divisor, remainder ] } }  $regex  :  {  field : { $regex: /pattern/, $options: ' options ' } }  \u9009\u9879\uff1a i \u5ffd\u7565\u5927\u5c0f\u5199  m \u591a\u4e2a\u8d77\u59cb\u70b9\u5339\u914d  x \u6269\u5c55  s \u5141\u8bb8'.*'\u6765\u5339\u914d $text   $where", 
            "title": "\u4f30\u503c\u64cd\u4f5c\u7b26"
        }, 
        {
            "location": "/MongoDB-Query/#_4", 
            "text": "geoWithin  \u67e5\u627e\u5728\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e geoIntersects \u67e5\u627e\u6307\u5b9a\u8303\u56f4\u5185\u76f8\u4ea4\u7684\u6570\u636e near  \u6709\u8fd1\u5230\u8fdc\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u76f8\u8fd1\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662fGeoJSON\u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\u5750\u6807 nearSphere \u6709\u8fd1\u5230\u8fdc\u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u76f8\u8fd1\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u662fGeoJSON\u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\u5750\u6807\u3002 nearSphere \u7403\u9762\u8ba1\u7b97\u65b9\u5f0f", 
            "title": "\u5730\u7406\u4f4d\u7f6e"
        }, 
        {
            "location": "/MongoDB-Query/#_5", 
            "text": "\u6295\u5c04\u64cd\u4f5c\u7b26 $   $elemMatch   $meta   $slice  $ \u64cd\u4f5c\u7b26\u8fd4\u56de\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 $elemMatch  \u64cd\u4f5c\u7b26\u8fd4\u56de\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u5b57\u6bb5\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 $meta \u64cd\u4f5c\u7b26\u8fd4\u56de\u6587\u672c\u76f8\u5173\u6027\u7684\u503c $slice \u8fd4\u56de\u6307\u5b9a\u6570\u91cf\u7684\u5143\u7d20", 
            "title": "\u6295\u5c04"
        }, 
        {
            "location": "/MongoDB-Query/#_6", 
            "text": "", 
            "title": "\u7d22\u5f15\u7b56\u7565"
        }, 
        {
            "location": "/MongoDB-Query/#_7", 
            "text": "* \u5e94\u7528\u5f53\u524d\u53ca\u9884\u671f\u7684\u67e5\u8be2\u64cd\u4f5c\u7c7b\u578b\n* \u5e94\u7528\u67e5\u8be2\u7684\u8bfb\u5199\u6bd4\n* \u7cfb\u7edf\u53ef\u7528\u5185\u5b58\u60c5\u51b5\n\n\u4f18\u5316\u67e5\u8be2\u8bed\u53e5 \u5c3d\u53ef\u80fd\u7684\u5168\u8986\u76d6 \u6216\u8986\u76d6\u524d\u7f00", 
            "title": "\u521b\u5efa\u7d22\u5f15\u9700\u8981\u8003\u8651\u7684\u56e0\u7d20"
        }, 
        {
            "location": "/MongoDB-Query/#_8", 
            "text": "* \u5efa\u7acb\u4e0d\u540c\u7d22\u5f15\u5e76\u6a21\u62df\u6d4b\u8bd5\u548c\u5206\u6790\u5b9e\u9645\u8868\u73b0", 
            "title": "\u6700\u4f73\u5224\u65ad\u65b9\u5f0f"
        }, 
        {
            "location": "/MongoDB-Query/#_9", 
            "text": "*\u7edd\u5927\u591a\u6570\u67e5\u8be2\u4ec5\u4f7f\u7528\u4e00\u4e2a\u7d22\u5f15\n*\u5f53\u67e5\u8be2\u4e2d\u5305\u62ec$or\u65f6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u53ef\u80fd\u4f7f\u7528\u4e0d\u540c\u7d22\u5f15\n*\u67e5\u8be2\u4e0d\u540c\u5b57\u6bb5\u65f6\uff0c\u53ef\u80fd\u51fa\u73b0\u7d22\u5f15\u4ea4\u66ff\u4f7f\u7528\u7684\u60c5\u51b5", 
            "title": "\u67e5\u8be2\u4e2d\u7d22\u5f15\u4f5c\u7528\u884c\u4e3a"
        }, 
        {
            "location": "/MongoDB-Query/#_10", 
            "text": "*\u5982\u679c\u67e5\u8be2\u90fd\u4f7f\u7528\u76f8\u540c\u5b57\u6bb5\uff0c\u5219\u5efa\u7acb\u5355\u5b57\u6bb5\u7d22\u5f15\n*\u5982\u679c\u8fd8\u8d70\u5176\u5b83\u5b57\u6bb5\uff0c\u5219\u53ef\u5efa\u7acb\u590d\u5408\u7d22\u5f15\n    *\u4e5f\u53ef\u5206\u522b\u5efa\u7acb\u7d22\u5f15\n*\u5c3d\u53ef\u80fd\u5b9e\u73b0\u8986\u76d6\u67e5\u8be2\uff0c\u65e0\u9700\u56de\u8868\uff0c\u63d0\u5347\u6548\u7387", 
            "title": "\u521b\u5efa\u6ee1\u8db3\u67e5\u8be2\u9700\u6c42\u7684\u7d22\u5f15"
        }, 
        {
            "location": "/MongoDB-Query/#_11", 
            "text": "*\u8fd9\u4e2a\u5b57\u6bb5\u51fa\u73b0\u91cd\u590d\u503c\u7684\u6982\u7387\u6bd4\u8f83\u5c0f\u3002\u901a\u8fc7\u67e5\u8be2\u6761\u4ef6\u80fd\u51c6\u786e\u7684\u67e5\u8be2\u5230\u6570\u636e\u5728\u5206\u7247\u7684\u7247\u952e\u9009\u62e9\u4e0a\u5bf9\u533a\u5206\u5ea6\u6709\u8f83\u9ad8\u8981\u6c42\n* \u5c3d\u53ef\u80fd\u7684\u4fdd\u8bc1\u7d22\u5f15\u90fd\u5c3d\u53ef\u80fd\u7684\u653e\u5165\u5185\u5b58\u51cf\u5c11IO", 
            "title": "\u5728\u533a\u5206\u5ea6\u9ad8\u7684\u5b57\u6bb5\u4e0a\u521b\u5efa\u7d22\u5f15"
        }, 
        {
            "location": "/MongoDB-Query/#_12", 
            "text": "*\u5373\u5e26\u6392\u5e8f\u7684\u67e5\u8be2\u662f\u5426\u8d70\u7d22\u5f15\u67e5\u8be2\n        *\u4e0d\u8d70\u7d22\u5f15\u7684\u5185\u5b58\u6392\u5e8f\uff0c\u4f7f\u7528\u5185\u5b58\u91cf\u4e0d\u80fd\u8d85\u8fc732MB\n    *\u5355\u5b57\u6bb5\u7d22\u5f15\u6392\u5e8f\uff0c\u7d22\u5f15\u5339\u914d\u5373\u53ef\n        *\u53ef\u5347\u5e8f\u3001\u964d\u5e8f\n    *\u590d\u5408\u7d22\u5f15\u8981\u6ce8\u610f\u6392\u5e8f\u987a\u5e8f\uff0c\u5982{a:1,b:1}\n        *{a:1,b:1} OK\n        *{b:1,a:1} NO\n        *{a:-1,b:-1}OK\n        *{a:1,b:-1} NO\n        *{a:-1,b:1} NO\n    *\u4f7f\u7528\u7d22\u5f15\u524d\u7f00\u67e5\u8be2\uff0c{a:1,b:1,c:1,d:1}\n        *db.data.find().sort({a:1})  prefix{a:1}\n        *db.data.find().sort({a:-1}) prefix{a:1}\n        *db.data.find().sort({a:1,b:1}) prefix{a:1,b:1}\n        *db.data.find().sort({a:-1,b:-1}) prefix{a:1,b:1}\n        *db.data.find().sort({a:1,b:1,c:1}) prefix{a:1,b:1}\n        *db.data.find({a:{$gt:4}).sort({a:1,b:1}) prefix{a:1,b:1}\n        *db.data.find({a:5}).sort({b:1,c:1}) prefix {a:1,b:1,c:1}\n        *db.data.find({b:3,a:4}).sort({c:1}) prefix{a:1,b:1,c:1}\n        *db.data.find({a:5,b:{$lt:3}}).sort({b:1}) prefix{a:1,b:1}\n        *db.data.find({a:{$gt:2}}).sort({c:1}) \u67e5\u8be2\u6761\u4ef6a\u80fd\u8d70\u7d22\u5f15\uff0c\u6392\u5e8f\u5219\u4e0d\u80fd\n        *db.data.find({c:5}).sort({c:1}) \u67e5\u8be2\u6761\u4ef6\u548c\u6392\u5e8f\u90fd\u4e0d\u80fd\u6392\u5e8f", 
            "title": "\u4f7f\u7528\u7d22\u5f15\u8fdb\u884c\u7ed3\u679c\u6392\u5e8f"
        }, 
        {
            "location": "/MongoDB-Pipeline/", 
            "text": "MongoDB\u7ba1\u9053", 
            "title": "Pipeline"
        }, 
        {
            "location": "/MongoDB-Pipeline/#mongodb", 
            "text": "", 
            "title": "MongoDB\u7ba1\u9053"
        }, 
        {
            "location": "/MySQL-Select/", 
            "text": "MySQL Select \u8bed\u53e5\n\n\nSELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    select_expr [, select_expr ...]\n    [FROM table_references\n      [PARTITION partition_list]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [FOR UPDATE | LOCK IN SHARE MODE]]\n\n\n\n\n\n\u4e0a\u9762\u662fSELECT SQL\u7684\u5e38\u7528\u90e8\u5206\u3002\n\n\n\u9010\u4e00\u4ecb\u7ecd\uff1a\n\n\n\n\nALL\n \u9ed8\u8ba4\u5373\u662f\n\n\n\n\nDISTINCT\n \nDISTINCTROW\n \u53bb\u91cd\u76f8\u540c\u7684\u5b57\u6bb5\u503c\n\n\n\n\n\n\nWHERE\n \u5373\u662f\u67e5\u8be2\u9650\u5236\u6761\u4ef6\u3002\n\n\n\u4e0b\u9762\u4e3b\u8981\u8bf4\u4e00\u4e0b in\u3001 not in\u3001 exists\u4e4b\u95f4\u7684\u5173\u5fc3\u548c\u95ee\u9898\u3002\n\n```\n\n IN equals =ANY\n    SELECT A FROM t1 WHERE a IN (SELECT A FROM t2)\n    SELECT a FROM t1 WHERE a = ANY (SELECT a from t2)\n\n NOT IN \u8868\u793a\u4e0d\u5728\u8303\u56f4\u5185\n    \u6ce8\u610f NOT IN \u4e0d\u8d70\u7d22\u5f15\n* EXISTS \n    * \u4ec5\u8fd4\u56deTRUS \u3001FLASE\n    * UNKNOWN\u8fd4\u56de\u4e3aFALSE\n    *  \u6709\u65f6\u80fd\u548c IN\u4e92\u6362\n    SELECT uid, name FROM custoers AS A WHERE company = 'AMD' AND EXISTS (SELECT * FROM orders AS B WHERE A.uid = B.uid)\n    SELECT uid, name FROM custoers AS A WHERE company = 'AMD' AND uid IN\uff08SELECT uid FROM orders);\n\n\n\n\n\n\nGROUP BY \u8868\u793a\u5206\u7ec4\n    ```\n        \u4f8b\u5982\u8ba2\u5355\uff0c\u6211\u4eec\u60f3\u6c42\u51fa\u6bcf\u4e2a\u6708\u7684\u603b\u9500\u552e\u989d \n\n\n    SELECT sum(orders_price) total , date_format(time, '%YY%m' FROM orders GROUP BY date_format(time, '%YY%m');\n\n\n\n```\n\nGROUP BY\u8981\u6ce8\u610f \u5728MySQL5.7\u4e2d\u9ed8\u8ba4\u53ea\u80fdSELECT\u67e5\u8be2\u5b57\u6bb5\u53ea\u80fd\u662f\u805a\u5408\u5b57\u6bb5\u3001\u6216GROUP BY\u7684\u5206\u7ec4\u5b57\u6bb5\u3002\u5728MySQL5.6\u53ca\u4ee5\u524d\u662f\u53ef\u4ee5\u51fa\u73b0\u5176\u5b83\u5b57\u6bb5\uff0c\u8fd4\u56de\u7684\u4e3a\u968f\u673a\u7684\u4e00\u6761\u8bb0\u5f55\u3002\u4f46\u8fd9\u662f\u6781\u529b\u4e0d\u63a8\u5d07\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7sql_mode=ONLY_FULL_GROUP_BY\u6765\u4f7f\u5f975.6\u548c5.7\u8868\u73b0\u7684\u4e00\u6837\n\n\nGROUP BY \u901a\u5e38\u7528\u5230\u4e34\u65f6\u8868\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7show status like'%tmp'\u6765\u67e5\u770b\u4f1a\u8bdd\u7ea7\u522b\u4e34\u65f6\u8868\u7684\u60c5\u51b5\u3002\u5982\u679c\u592a\u5c0f\u5219\u4f1a\u5f71\u54cd\u5230\u5206\u7ec4\u7684\u901f\u5ea6\u3002\u53ef\u4ee5\u901a\u8fc7tmp_table_size\u6765\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u662f16M\n(root@localhost) [(none)]\nshow status like '%tmp%'\n-\n ;\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 1     |\n| Created_tmp_files       | 7     |\n| Created_tmp_tables      | 1     |\n+-------------------------+-------+\n3 rows in set (0.01 sec)\n\n\n\n\n\n\nHAVING \u8868\u793a\u5206\u7ec4\u540e\u7684\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u662fSELECT\u51fa\u73b0\u7684\u5217\n\n\n\n\n\n\nORDER BY \u8868\u793a\u6392\u5e8f\uff0c\n    \n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7sort_buffer_size\u6765\u8bbe\u7f6e\u6392\u5e8f\u5185\u5b58\u3002\n        \u901a\u8fc7show[global] status like '%sort%' \u67e5\u770b\u6392\u5e8f\u5185\u5b58\u7684\u60c5\u51b5\u3002\u82e5Sort_merge_passes\u503c\u5f88\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7sort_buffer_size\u907f\u514d\u5408\u5e76\u64cd\u4f5c\u3002\n\n\n\n\nLIMIT \u83b7\u53d6\u524d\u591a\u5c11\u6761\u8bb0\u5f55\u3002\n    \n\u53ef\u4ee5\u8fdb\u884c\u5206\u9875\u3002\u5355\u7eaf\u7684LIMIT \u5206\u9875\u5728\u8d8a\u5f80\u540e\u6027\u80fd\u8d8a\u5dee\u3002 \n            1.\u53ef\u4ee5\u901a\u8fc7\u6bcf\u6b21\u67e5\u8be2\u5f85\u4f1a\u4e0a\u4e00\u6b21\u6700\u540e\u7684\u8bb0\u5f55\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684\u67e5\u8be2\u6761\u4ef6\u6765\u51cf\u5c11LIMIT\u7684\u6761\u6570\n                select id, name from user where id \n last_id order by id limit 10\n            2.\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u6027\u8fd4\u56de\u591a\u6761\u6570\u636e\u6765\u51cf\u5c11\u7f51\u7edc\u6b21\u6570\u3002\u6bd4\u5982\u6bcf\u9875\u662f10\u6761\uff0c\u53ef\u4ee5\u4e00\u6b21\u6027\u8fd4\u56de30\u6761\n\n\n\n\n\u5c0f\u8d34\u58eb\n\n\ncount(1) count(*) \u533a\u522b\u6ca1\u6709\u533a\u522b\uff0c \u51fa\u6765\u7684\u5c31\u662f\u884c\u6570\ncount(field)\u5219\u7edf\u8ba1\u7684\u4e3a\u975eNULL\u7684\u6570\u91cf\n\n\n\n\n(root@localhost) [(none)]\nselect NULL IN ('a', 'b', NULL);\n+--------------------------+\n| NULL IN ('a', 'b', NULL) |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set (0.00 sec)\n(root@localhost) [dbt3]\nselect 'c'  in ('a','b', NULL);\n+-------------------------+\n| 'c'  in ('a','b', NULL) |\n+-------------------------+\n|                    NULL |\n+-------------------------+\n1 row in set (0.00 sec)\n\n(root@localhost) [dbt3]\nselect 'a'  in ('a','b', NULL);\n+-------------------------+\n| 'a'  in ('a','b', NULL) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n(root@localhost) [dbt3]\nselect 'a'  not in ('a','b', NULL);\n+-----------------------------+\n| 'a'  not in ('a','b', NULL) |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n1 row in set (0.00 sec)\n\n\u5e26\u6709NULL\u7684\u5b57\u6bb5\uff0cIN \u7528\u6237\u8fd4\u56de TRUE\u6216 NULL, NOT IN \u6c38\u8fdc\u8fd4\u56de NULL \u6216 FALSE \u6c38\u8fdc\u67e5\u4e0d\u5230\u6570\u636e \u8981\u8fc7\u6ee4\u6389NULL\u503c\u3002\n\n\n\n\n\u6240\u4ee5\u4e0d\u8981\u5728\u5efa\u8868\u4e2d\u4f7f\u7528NULL\u503c\uff0c\u4f1a\u5f15\u8d77\u5f88\u591a\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\u3002\n\n\nSELECT \n    CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS NAME,\n    character_set_name,\n    GROUP_CONCAT(COLUMN_NAME SEPARATOR ' : ') AS COLUMN_LIST\nFROM information_schema.COLUMNS\nWHERE\ndata_type IN ('varchar','longtext','text','mediumtext','char')\nAND character_set_name \n 'utf8mb4'\nAND table_schema NOT IN ('mysql' , 'performance_schema',\n        'information_schema','sys')\nGROUP BY NAME,character_set_name;", 
            "title": "Select"
        }, 
        {
            "location": "/MySQL-Select/#mysql-select", 
            "text": "SELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    select_expr [, select_expr ...]\n    [FROM table_references\n      [PARTITION partition_list]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ...]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [FOR UPDATE | LOCK IN SHARE MODE]]  \u4e0a\u9762\u662fSELECT SQL\u7684\u5e38\u7528\u90e8\u5206\u3002  \u9010\u4e00\u4ecb\u7ecd\uff1a   ALL  \u9ed8\u8ba4\u5373\u662f   DISTINCT   DISTINCTROW  \u53bb\u91cd\u76f8\u540c\u7684\u5b57\u6bb5\u503c    WHERE  \u5373\u662f\u67e5\u8be2\u9650\u5236\u6761\u4ef6\u3002  \u4e0b\u9762\u4e3b\u8981\u8bf4\u4e00\u4e0b in\u3001 not in\u3001 exists\u4e4b\u95f4\u7684\u5173\u5fc3\u548c\u95ee\u9898\u3002 \n```  IN equals =ANY\n    SELECT A FROM t1 WHERE a IN (SELECT A FROM t2)\n    SELECT a FROM t1 WHERE a = ANY (SELECT a from t2)  NOT IN \u8868\u793a\u4e0d\u5728\u8303\u56f4\u5185\n    \u6ce8\u610f NOT IN \u4e0d\u8d70\u7d22\u5f15\n* EXISTS \n    * \u4ec5\u8fd4\u56deTRUS \u3001FLASE\n    * UNKNOWN\u8fd4\u56de\u4e3aFALSE\n    *  \u6709\u65f6\u80fd\u548c IN\u4e92\u6362\n    SELECT uid, name FROM custoers AS A WHERE company = 'AMD' AND EXISTS (SELECT * FROM orders AS B WHERE A.uid = B.uid)\n    SELECT uid, name FROM custoers AS A WHERE company = 'AMD' AND uid IN\uff08SELECT uid FROM orders);    GROUP BY \u8868\u793a\u5206\u7ec4\n    ```\n        \u4f8b\u5982\u8ba2\u5355\uff0c\u6211\u4eec\u60f3\u6c42\u51fa\u6bcf\u4e2a\u6708\u7684\u603b\u9500\u552e\u989d       SELECT sum(orders_price) total , date_format(time, '%YY%m' FROM orders GROUP BY date_format(time, '%YY%m');  ``` GROUP BY\u8981\u6ce8\u610f \u5728MySQL5.7\u4e2d\u9ed8\u8ba4\u53ea\u80fdSELECT\u67e5\u8be2\u5b57\u6bb5\u53ea\u80fd\u662f\u805a\u5408\u5b57\u6bb5\u3001\u6216GROUP BY\u7684\u5206\u7ec4\u5b57\u6bb5\u3002\u5728MySQL5.6\u53ca\u4ee5\u524d\u662f\u53ef\u4ee5\u51fa\u73b0\u5176\u5b83\u5b57\u6bb5\uff0c\u8fd4\u56de\u7684\u4e3a\u968f\u673a\u7684\u4e00\u6761\u8bb0\u5f55\u3002\u4f46\u8fd9\u662f\u6781\u529b\u4e0d\u63a8\u5d07\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7sql_mode=ONLY_FULL_GROUP_BY\u6765\u4f7f\u5f975.6\u548c5.7\u8868\u73b0\u7684\u4e00\u6837  GROUP BY \u901a\u5e38\u7528\u5230\u4e34\u65f6\u8868\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7show status like'%tmp'\u6765\u67e5\u770b\u4f1a\u8bdd\u7ea7\u522b\u4e34\u65f6\u8868\u7684\u60c5\u51b5\u3002\u5982\u679c\u592a\u5c0f\u5219\u4f1a\u5f71\u54cd\u5230\u5206\u7ec4\u7684\u901f\u5ea6\u3002\u53ef\u4ee5\u901a\u8fc7tmp_table_size\u6765\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u662f16M\n(root@localhost) [(none)] show status like '%tmp%'\n-  ;\n+-------------------------+-------+\n| Variable_name           | Value |\n+-------------------------+-------+\n| Created_tmp_disk_tables | 1     |\n| Created_tmp_files       | 7     |\n| Created_tmp_tables      | 1     |\n+-------------------------+-------+\n3 rows in set (0.01 sec)    HAVING \u8868\u793a\u5206\u7ec4\u540e\u7684\u8fc7\u6ee4\uff0c\u8fc7\u6ee4\u662fSELECT\u51fa\u73b0\u7684\u5217    ORDER BY \u8868\u793a\u6392\u5e8f\uff0c\n     \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7sort_buffer_size\u6765\u8bbe\u7f6e\u6392\u5e8f\u5185\u5b58\u3002\n        \u901a\u8fc7show[global] status like '%sort%' \u67e5\u770b\u6392\u5e8f\u5185\u5b58\u7684\u60c5\u51b5\u3002\u82e5Sort_merge_passes\u503c\u5f88\u5927\uff0c\u53ef\u4ee5\u901a\u8fc7sort_buffer_size\u907f\u514d\u5408\u5e76\u64cd\u4f5c\u3002   LIMIT \u83b7\u53d6\u524d\u591a\u5c11\u6761\u8bb0\u5f55\u3002\n     \u53ef\u4ee5\u8fdb\u884c\u5206\u9875\u3002\u5355\u7eaf\u7684LIMIT \u5206\u9875\u5728\u8d8a\u5f80\u540e\u6027\u80fd\u8d8a\u5dee\u3002 \n            1.\u53ef\u4ee5\u901a\u8fc7\u6bcf\u6b21\u67e5\u8be2\u5f85\u4f1a\u4e0a\u4e00\u6b21\u6700\u540e\u7684\u8bb0\u5f55\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684\u67e5\u8be2\u6761\u4ef6\u6765\u51cf\u5c11LIMIT\u7684\u6761\u6570\n                select id, name from user where id   last_id order by id limit 10\n            2.\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u6027\u8fd4\u56de\u591a\u6761\u6570\u636e\u6765\u51cf\u5c11\u7f51\u7edc\u6b21\u6570\u3002\u6bd4\u5982\u6bcf\u9875\u662f10\u6761\uff0c\u53ef\u4ee5\u4e00\u6b21\u6027\u8fd4\u56de30\u6761", 
            "title": "MySQL Select \u8bed\u53e5"
        }, 
        {
            "location": "/MySQL-Select/#_1", 
            "text": "count(1) count(*) \u533a\u522b\u6ca1\u6709\u533a\u522b\uff0c \u51fa\u6765\u7684\u5c31\u662f\u884c\u6570\ncount(field)\u5219\u7edf\u8ba1\u7684\u4e3a\u975eNULL\u7684\u6570\u91cf  (root@localhost) [(none)] select NULL IN ('a', 'b', NULL);\n+--------------------------+\n| NULL IN ('a', 'b', NULL) |\n+--------------------------+\n|                     NULL |\n+--------------------------+\n1 row in set (0.00 sec)\n(root@localhost) [dbt3] select 'c'  in ('a','b', NULL);\n+-------------------------+\n| 'c'  in ('a','b', NULL) |\n+-------------------------+\n|                    NULL |\n+-------------------------+\n1 row in set (0.00 sec)\n\n(root@localhost) [dbt3] select 'a'  in ('a','b', NULL);\n+-------------------------+\n| 'a'  in ('a','b', NULL) |\n+-------------------------+\n|                       1 |\n+-------------------------+\n1 row in set (0.00 sec)\n(root@localhost) [dbt3] select 'a'  not in ('a','b', NULL);\n+-----------------------------+\n| 'a'  not in ('a','b', NULL) |\n+-----------------------------+\n|                           0 |\n+-----------------------------+\n1 row in set (0.00 sec)\n\n\u5e26\u6709NULL\u7684\u5b57\u6bb5\uff0cIN \u7528\u6237\u8fd4\u56de TRUE\u6216 NULL, NOT IN \u6c38\u8fdc\u8fd4\u56de NULL \u6216 FALSE \u6c38\u8fdc\u67e5\u4e0d\u5230\u6570\u636e \u8981\u8fc7\u6ee4\u6389NULL\u503c\u3002  \u6240\u4ee5\u4e0d\u8981\u5728\u5efa\u8868\u4e2d\u4f7f\u7528NULL\u503c\uff0c\u4f1a\u5f15\u8d77\u5f88\u591a\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\u3002  SELECT \n    CONCAT(TABLE_SCHEMA,'.',TABLE_NAME) AS NAME,\n    character_set_name,\n    GROUP_CONCAT(COLUMN_NAME SEPARATOR ' : ') AS COLUMN_LIST\nFROM information_schema.COLUMNS\nWHERE\ndata_type IN ('varchar','longtext','text','mediumtext','char')\nAND character_set_name   'utf8mb4'\nAND table_schema NOT IN ('mysql' , 'performance_schema',\n        'information_schema','sys')\nGROUP BY NAME,character_set_name;", 
            "title": "\u5c0f\u8d34\u58eb"
        }, 
        {
            "location": "/leveldb-read-flow/", 
            "text": "LevelDB \u8bfb\u53d6\u6d41\u7a0b\n\n\nLevelDB\u7684\u8bfb\u53d6\u8fc7\u7a0b\u603b\u5171\u5206\u4e3a\u4e09\u4e2a\u6d41\u7a0b:\n\n\n\n\n\u4ece\u5f53\u524d\u5185\u5b58\u8868\u8bfb\u53d6\n\n\n\u4ece(imm)\u4e0d\u53ef\u53d8\u5185\u5b58\u8868\u8bfb\u53d6\n\n\n\u4ece\u6570\u636e\u6587\u4ef6\u8bfb\u53d6\n\n\n\n\n    LookupKey lkey(key, snapshot);\n    if (mem-\nGet(lkey, value, \ns)) {\n      // Done\n    } else if (imm != NULL \n imm-\nGet(lkey, value, \ns)) {\n      // Done\n    } else {\n      s = current-\nGet(options, lkey, value, \nstats);\n      have_stat_update = true;\n    }\n\n\n\n\n\u5185\u5b58\u8868\u91c7\u7528skiplist(\u8df3\u8868)\u5b58\u50a8\u3002\u5728\u5411\u6587\u4ef6\u67e5\u8be2\u65f6\u5019\uff0c\u67e5\u8be2\u7684\u8fc7\u7a0b:\n\n\n\n\n\u6309\u6587\u4ef6level\u987a\u5e8f\u67e5\u8be2\u6587\u4ef6\u3002\u5229\u7528\u6bcf\u4e2a\u6587\u4ef6\u7d22\u5f15\u5224\u65adkey\u662f\u5426\u5728\u6b64\u6587\u4ef6\u5462\u3002\n\n\nlevel0 \u7ea7\u522b\u6587\u4ef6\u56e0\u4e3a\u662f\u5faa\u73af\u5199\u5165\uff0c\u6240\u4ee5\u5e76\u975e\u5e8f\u53f7\u5927\u7684\u5c31\u4ee3\u8868\u6700\u65b0\u6587\u4ef6\u3002\u6240\u4ee5\u9700\u8981\u5bf9\u6587\u4ef6\u6392\u5e8f\uff0c\u6765\u627e\u51fa\u6700\u65b0\u7684value\u53d8\u5316\u3002\n\n\n\u5bf9\u53ef\u80fd\u5b58\u5728key\u7684\u6587\u4ef6\u8fdb\u884c\u67e5\u627e\uff0c\u5224\u65ad\u662f\u5426\u5728\u6b64\u6587\u4ef6\u3002\n\n\n\n\n for (int level = 0; level \n config::kNumLevels; level++) {\n    size_t num_files = files_[level].size();\n    if (num_files == 0) continue;\n\n    // Get the list of files to search in this level\n    FileMetaData* const* files = \nfiles_[level][0];\n    if (level == 0) {\n      // Level-0 files may overlap each other.  Find all files that\n      // overlap user_key and process them in order from newest to oldest.\n      tmp.reserve(num_files);\n      for (uint32_t i = 0; i \n num_files; i++) {\n        FileMetaData* f = files[i];\n        if (ucmp-\nCompare(user_key, f-\nsmallest.user_key()) \n= 0 \n\n            ucmp-\nCompare(user_key, f-\nlargest.user_key()) \n= 0) {\n          tmp.push_back(f);\n        }\n      }\n      if (tmp.empty()) continue;\n\n      std::sort(tmp.begin(), tmp.end(), NewestFirst);\n      files = \ntmp[0];\n      num_files = tmp.size();\n    } else {\n      // Binary search to find earliest index whose largest key \n= ikey.\n      uint32_t index = FindFile(vset_-\nicmp_, files_[level], ikey);\n      if (index \n= num_files) {\n        files = NULL;\n        num_files = 0;\n      } else {\n        tmp2 = files[index];\n        if (ucmp-\nCompare(user_key, tmp2-\nsmallest.user_key()) \n 0) {\n          // All of \ntmp2\n is past any data for user_key\n          files = NULL;\n          num_files = 0;\n        } else {\n          files = \ntmp2;\n          num_files = 1;\n        }\n      }\n    }\n\n    for (uint32_t i = 0; i \n num_files; ++i) {\n      if (last_file_read != NULL \n stats-\nseek_file == NULL) {\n        // We have had more than one seek for this read.  Charge the 1st file.\n        stats-\nseek_file = last_file_read;\n        stats-\nseek_file_level = last_file_read_level;\n      }\n\n      FileMetaData* f = files[i];\n      last_file_read = f;\n      last_file_read_level = level;\n\n      Saver saver;\n      saver.state = kNotFound;\n      saver.ucmp = ucmp;\n      saver.user_key = user_key;\n      saver.value = value;\n      s = vset_-\ntable_cache_-\nGet(options, f-\nnumber, f-\nfile_size,\n                                   ikey, \nsaver, SaveValue);", 
            "title": "Read"
        }, 
        {
            "location": "/leveldb-read-flow/#leveldb", 
            "text": "LevelDB\u7684\u8bfb\u53d6\u8fc7\u7a0b\u603b\u5171\u5206\u4e3a\u4e09\u4e2a\u6d41\u7a0b:   \u4ece\u5f53\u524d\u5185\u5b58\u8868\u8bfb\u53d6  \u4ece(imm)\u4e0d\u53ef\u53d8\u5185\u5b58\u8868\u8bfb\u53d6  \u4ece\u6570\u636e\u6587\u4ef6\u8bfb\u53d6       LookupKey lkey(key, snapshot);\n    if (mem- Get(lkey, value,  s)) {\n      // Done\n    } else if (imm != NULL   imm- Get(lkey, value,  s)) {\n      // Done\n    } else {\n      s = current- Get(options, lkey, value,  stats);\n      have_stat_update = true;\n    }  \u5185\u5b58\u8868\u91c7\u7528skiplist(\u8df3\u8868)\u5b58\u50a8\u3002\u5728\u5411\u6587\u4ef6\u67e5\u8be2\u65f6\u5019\uff0c\u67e5\u8be2\u7684\u8fc7\u7a0b:   \u6309\u6587\u4ef6level\u987a\u5e8f\u67e5\u8be2\u6587\u4ef6\u3002\u5229\u7528\u6bcf\u4e2a\u6587\u4ef6\u7d22\u5f15\u5224\u65adkey\u662f\u5426\u5728\u6b64\u6587\u4ef6\u5462\u3002  level0 \u7ea7\u522b\u6587\u4ef6\u56e0\u4e3a\u662f\u5faa\u73af\u5199\u5165\uff0c\u6240\u4ee5\u5e76\u975e\u5e8f\u53f7\u5927\u7684\u5c31\u4ee3\u8868\u6700\u65b0\u6587\u4ef6\u3002\u6240\u4ee5\u9700\u8981\u5bf9\u6587\u4ef6\u6392\u5e8f\uff0c\u6765\u627e\u51fa\u6700\u65b0\u7684value\u53d8\u5316\u3002  \u5bf9\u53ef\u80fd\u5b58\u5728key\u7684\u6587\u4ef6\u8fdb\u884c\u67e5\u627e\uff0c\u5224\u65ad\u662f\u5426\u5728\u6b64\u6587\u4ef6\u3002    for (int level = 0; level   config::kNumLevels; level++) {\n    size_t num_files = files_[level].size();\n    if (num_files == 0) continue;\n\n    // Get the list of files to search in this level\n    FileMetaData* const* files =  files_[level][0];\n    if (level == 0) {\n      // Level-0 files may overlap each other.  Find all files that\n      // overlap user_key and process them in order from newest to oldest.\n      tmp.reserve(num_files);\n      for (uint32_t i = 0; i   num_files; i++) {\n        FileMetaData* f = files[i];\n        if (ucmp- Compare(user_key, f- smallest.user_key())  = 0  \n            ucmp- Compare(user_key, f- largest.user_key())  = 0) {\n          tmp.push_back(f);\n        }\n      }\n      if (tmp.empty()) continue;\n\n      std::sort(tmp.begin(), tmp.end(), NewestFirst);\n      files =  tmp[0];\n      num_files = tmp.size();\n    } else {\n      // Binary search to find earliest index whose largest key  = ikey.\n      uint32_t index = FindFile(vset_- icmp_, files_[level], ikey);\n      if (index  = num_files) {\n        files = NULL;\n        num_files = 0;\n      } else {\n        tmp2 = files[index];\n        if (ucmp- Compare(user_key, tmp2- smallest.user_key())   0) {\n          // All of  tmp2  is past any data for user_key\n          files = NULL;\n          num_files = 0;\n        } else {\n          files =  tmp2;\n          num_files = 1;\n        }\n      }\n    }\n\n    for (uint32_t i = 0; i   num_files; ++i) {\n      if (last_file_read != NULL   stats- seek_file == NULL) {\n        // We have had more than one seek for this read.  Charge the 1st file.\n        stats- seek_file = last_file_read;\n        stats- seek_file_level = last_file_read_level;\n      }\n\n      FileMetaData* f = files[i];\n      last_file_read = f;\n      last_file_read_level = level;\n\n      Saver saver;\n      saver.state = kNotFound;\n      saver.ucmp = ucmp;\n      saver.user_key = user_key;\n      saver.value = value;\n      s = vset_- table_cache_- Get(options, f- number, f- file_size,\n                                   ikey,  saver, SaveValue);", 
            "title": "LevelDB \u8bfb\u53d6\u6d41\u7a0b"
        }, 
        {
            "location": "/leveldb-write-flow/", 
            "text": "LevelDB \u6e90\u7801\u89e3\u6790-\u5199\u5165\n\n\n\u672c\u7cfb\u5217\u4ecb\u7ecdLevelDB,\u5bf9\u5176\u6e90\u7801\u8fdb\u884c\u89e3\u6790\u3002\n\n\nWriteBatch\u7c7b\n\n\n\u5728\u8fdb\u884c\u63d2\u5165\u66f4\u65b0\u64cd\u4f5c\u7684\u65f6\u5019\uff0cWriteBatch\u7c7b\u8d1f\u8d23\u8fdb\u884c\u6279\u91cf\u7684\u539f\u5b50\u6027\u64cd\u4f5c\u3002\u4e0b\u9762\u6765\u770b\u4e00\u770bWriteBatch\u7ed3\u6784\uff1a\n\n\nclass WriteBatch {\n public:\n  WriteBatch();\n  ~WriteBatch();\n\n  // Store the mapping \nkey-\nvalue\n in the database.\n  void Put(const Slice\n key, const Slice\n value);\n\n  // If the database contains a mapping for \nkey\n, erase it.  Else do nothing.\n  void Delete(const Slice\n key);\n\n  // Clear all updates buffered in this batch.\n  void Clear();\n\n  // Support for iterating over the contents of a batch.\n  class Handler {\n   public:\n    virtual ~Handler();\n    virtual void Put(const Slice\n key, const Slice\n value) = 0;\n    virtual void Delete(const Slice\n key) = 0;\n  };\n  Status Iterate(Handler* handler) const;\n\n public:\n  friend class WriteBatchInternal;\n\n  std::string rep_;  // See comment in write_batch.cc for the format of rep_\n\n  // Intentionally copyable\n};\n\n\n\n\n\nWriteBatch \u63d0\u4f9b Put\u3001Delete\u3001Clear \u64cd\u4f5c\u3002\u53ef\u4ee5\u770b\u5230 rep_ \u5b58\u50a8\u7684\u65b9\u5f0f\u5229\u7528\u7684 std::string\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u5b58\u50a8\u7684\u7ed3\u6784\u3002\n\n\n\n\n\n\n\n\n8byte\n\n\n4byte\n\n\n1byte\n\n\nkey's length (\u53d8\u957f)\n\n\nkey's value\n\n\nvalue's length(\u53d8\u957f)\n\n\nvalue\n\n\n\n\n\n\n\n\n\n\n\n\nsequence\n\n\n\u64cd\u4f5c\u6b21\u6570\n\n\n\u64cd\u4f5c\u7c7b\u578b\n\n\nkey \u7684\u957f\u5ea6\n\n\nkey \u7684\u5185\u5bb9\n\n\nvalue \u7684\u957f\u5ea6\n\n\n\n\n\n\n\n\n\u8fd9\u91cc key value \u957f\u5ea6\u7684\u5199\u5165\u662f\u53ef\u53d8\u957f\u5ea6\u7684\uff0c\u4ee5\u4fbf\u8282\u7701\u7a7a\u95f4\u3002\n\n\nchar* EncodeVarint32(char* dst, uint32_t v) {\n  // Operate on characters as unsigneds\n  unsigned char* ptr = reinterpret_cast\nunsigned char*\n(dst);\n  static const int B = 128;\n  if (v \n (1\n7)) {\n    *(ptr++) = v;\n  } else if (v \n (1\n14)) {\n    *(ptr++) = v | B;\n    *(ptr++) = v\n7;\n  } else if (v \n (1\n21)) {\n    *(ptr++) = v | B;\n    *(ptr++) = (v\n7) | B;\n    *(ptr++) = v\n14;\n  } else if (v \n (1\n28)) {\n    *(ptr++) = v | B;\n    *(ptr++) = (v\n7) | B;\n    *(ptr++) = (v\n14) | B;\n    *(ptr++) = v\n21;\n  } else {\n    *(ptr++) = v | B;\n    *(ptr++) = (v\n7) | B;\n    *(ptr++) = (v\n14) | B;\n    *(ptr++) = (v\n21) | B;\n    *(ptr++) = v\n28;\n  }\n  return reinterpret_cast\nchar*\n(ptr);\n}\n\n\n\n\n\n\u4e3e\u4f8b\uff1a\n\n\n\n\n\n\n\n\n0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n\n\n0x01 0x00 0x00 0x00\n\n\n0x01\n\n\n0x05\n\n\n0x68 0x65 0x6C 0x6C 0x6F\n\n\n0x05\n\n\n0x77 0x6F 0x72 0x6C 0x64\n\n\n\n\n\n\n\n\n\n\nsequence\n\n\n\u64cd\u4f5c\u6b21\u6570\n\n\n\u64cd\u4f5c\u7c7b\u578b(put)\n\n\nkey \u957f\u5ea6(5)\n\n\n'hello'\n\n\nvalue \u957f\u5ea6\n\n\n\u2018world\u2019\n\n\n\n\n\n\n\n\nLevelDB\u5199\u5165\u64cd\u4f5c\u5728\u51fd\u6570:\n\nStatus DBImpl::Write(const WriteOptions\n options, WriteBatch* my_batch)\n\n\n\u4e3b\u8981\u6d41\u7a0b:\n\n\nst=\nstart: \u5f00\u59cb\ne=\nend: \u7ed3\u675f\nop=\noperation: \u5206\u914d\u8db3\u591f\u7684\u7a7a\u95f4\nop1=\noperation: \u5408\u5e76\u64cd\u4f5c\nop2=\noperation: \u5199\u5165\u65e5\u5fd7\nop3=\noperation: \u5199\u5165\u5185\u5b58\ncond=\ncondition: \u786e\u8ba4\uff1f\n\nst-\nop-\nop1-\nop2-\nop3-\ne\ncond(yes)-\ne\ncond(no)-\nop\n\n\n\n\n\u4e0b\u9762\u9010\u4e2a\u8bf4\u660e\u5404\u4e2a\u6d41\u7a0b:\n\n\n\u5206\u914d\u7a7a\u95f4\n\n\n\u4e3b\u8981\u5728 \nStatus DBImpl::MakeRoomForWrite(bool force)\n \u91cc\u9762\u3002\u96c6\u4e2d\u5728\u5404\u4e2a\u72b6\u6001\u7684\u5224\u65ad\u4e0a\u3002\u5206\u522b\u662f \n\n\n\n\n\n\nlevel0\u6587\u4ef6\u662f\u5426\u8d85\u8fc7kL0_SlowdownWritesTrigger(8)\u4e2a\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u5219\u7761\u77201000us, \u7b49\u5f85\u80cc\u666f\u7ebf\u7a0b\u5408\u5e76level0\u6587\u4ef6\n\n\n\n\n\n\n\u5f53\u524d\u5185\u5b58\u8868\u6ee1\u4e86\uff0c\u5e76\u4e14imm \uff08\u4e0d\u53ef\u53d8\uff09\u5185\u5b58\u4ecd\u7136\u5728compacted\uff0c\u5219\u7b49\u5f85\u3002\n\n\n\n\n\n\n\u5982\u679clevel0\u6587\u4ef6\u8d85\u8fc7kL0_StopWritesTrigger(12)\u6587\u4ef6\u5219\u7b49\u5f85\n\n\n\n\n\n\n\u6700\u540e\u7684\u60c5\u51b5\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8868\u6ee1\u4e86\uff0cimm(\u4e0d\u53ef\u53d8\u5185\u5b58\u8868\u6ca1\u6709\u6ee1\uff09\u5219\u8fdb\u884c\u5207\u6362\uff0c\u5e76\u89e6\u53d1compact\u540e\u53f0\u7ebf\u7a0b\n\n\n\n\n\n\n\u7ec4\u63d0\u4ea4\n\n\n\u8fd9\u90e8\u5206\u4e3b\u8981\u662f\u63d0\u4ea4\u5f53\u524d\u7248\u672c\u53f7\u4ee5\u524d\u7684\u6570\u636e:\n\n\n\n\n\n\n\u9996\u5148\uff0c\u5c06\u5f53\u524d\u7248\u672c\u53f7\u4ee5\u524d\u7684WriteBatch\u5408\u5e76\u4e3a\u4e00\u4e2aWriteBatch \u5e76\u4e14\u66f4\u65b0\u7248\u672c\u53f7+1\n\n\n\n\n\n\n\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\n\n\n\n\n\n\n\u5199\u5165\u5185\u5b58\u8868\n\n\n\n\n\n\n\u66f4\u65b0\u5f53\u524d\u7248\u672c\u53f7\u4e4b\u524d\u7684Writers\u961f\u5217\u4fe1\u606f\uff0cdone\u7684\u52a8\u4f5c\u7531false\u53d8\u4e3atrue\u3002\n\n\n\n\n\n\n\u901a\u77e5\u5176\u5b83\u7ebf\u7a0b\n\n\n\n\n\n\n\u65e5\u5fd7\u6587\u4ef6\n\n\n\u65e5\u5fd7\u6587\u4ef6\u662f\u6709block\u7ec4\u6210\u3002\u6bcf\u4e2ablock\u91cc\u9762\u5b58\u50a8\u591a\u6761\u65e5\u5fd7\u4fe1\u606f\u3002\u6bcf\u4e00\u6761\u65e5\u5fd7\u4fe1\u606f\u4e2a\u683c\u5f0f\u5982\u4e0b:\n\n\n\n\n\n\n\n\n4 bytes\n\n\n2 bytes\n\n\n1 byte\n\n\nn bytes\n\n\n\n\n\n\n\n\n\n\ncrc\u6821\u9a8c\n\n\n\u6570\u636e\u957f\u5ea6\n\n\n\u8bb0\u5f55\u7c7b\u578b\n\n\n\u6570\u636e\n\n\n\n\n\n\n\n\n\u524d7\u4f4d\u4e3aheader\u3002\u8bb0\u5f55\u7c7b\u578b\u6709\u4ee5\u4e0b\u51e0\u79cd:\n\n\n\n\nkFullType\n\n\nkFirstType\n\n\nkMiddleType\n\n\nkLastType\n\n\n\n\n\u5bf9\u5e94\u5199\u5165block\u5185\u7684\u51e0\u79cd\u60c5\u51b5\n\n\n\n\nblock\u80fd\u591f\u5bb9\u7eb3\u4e00\u6761\u6570\u636e\u7684\u5199\u5165\n\n\nblock\u80fd\u5199\u5230\u6570\u636e\u7684\u4e00\u90e8\u5206\n\n\n\u4e00\u6761\u6570\u636e\u6709\u53ef\u80fd\u5927\u4e8e\u4e00\u4e2ablock\u5927\u5c0f\uff0c\u5219\u5199\u5165\u6709\u53ef\u80fd\u4e00\u4e2ablock\u53ea\u5199\u4e86\u6570\u636e\u7684\u4e2d\u95f4\u90e8\u5206\n\n\nblock\u5199\u5165\u4e00\u6761\u6570\u636e\u7684\u5c3e\u90e8\n\n\n\n\n\u5982\u679c\u4e00\u4e2ablock\u7684\u5269\u4f59\u7a7a\u95f4\u5c0f\u4e8ekHeaderSize\uff0c\u5219\u5269\u4f59\u8282\u75280x00\u586b\u5145\u3002\n\u4e0b\u9762\u7528\u5b9e\u9645\u4f8b\u5b50\u6765\u8bf4\u660e:\n\u6211\u4eec\u5411\u6587\u4ef6\u5199\u5165key:\u201chello\" value:\"world\"\u65e5\u5fd7\u4ea7\u751f\u5982\u4e0b\n\n00000000  c8 d2 82 81 19 00 01 01  00 00 00 00 00 00 00 01  |................|\n00000010  00 00 00 01 05 68 65 6c  6c 6f 05 77 6f 72 6c 64  |.....hello.world|\n00000020\n\n\nc8 d2 82 81\n \u4e3aCRC\u6821\u9a8c\n\n19 00\n \u4e3a\u6570\u636e\u957f\u5ea6\n\n01\n \u4e3a\u8bb0\u5f55\u7c7b\u578b\n\n00 00 00 00 00 00 00 01\n \u4e3asequence\n\n00 00 00 01\n \u4e3acount\n\n05\n\u4e3akey\u957f\u5ea6\n\n68 65 6c  6c 6f\n \u4e3ahello\n\n05\n\u4e3avalue\u957f\u5ea6\n\n77 6f 72 6c 64\n \u4e3aworld", 
            "title": "Write"
        }, 
        {
            "location": "/leveldb-write-flow/#leveldb-", 
            "text": "\u672c\u7cfb\u5217\u4ecb\u7ecdLevelDB,\u5bf9\u5176\u6e90\u7801\u8fdb\u884c\u89e3\u6790\u3002", 
            "title": "LevelDB \u6e90\u7801\u89e3\u6790-\u5199\u5165"
        }, 
        {
            "location": "/leveldb-write-flow/#writebatch", 
            "text": "\u5728\u8fdb\u884c\u63d2\u5165\u66f4\u65b0\u64cd\u4f5c\u7684\u65f6\u5019\uff0cWriteBatch\u7c7b\u8d1f\u8d23\u8fdb\u884c\u6279\u91cf\u7684\u539f\u5b50\u6027\u64cd\u4f5c\u3002\u4e0b\u9762\u6765\u770b\u4e00\u770bWriteBatch\u7ed3\u6784\uff1a  class WriteBatch {\n public:\n  WriteBatch();\n  ~WriteBatch();\n\n  // Store the mapping  key- value  in the database.\n  void Put(const Slice  key, const Slice  value);\n\n  // If the database contains a mapping for  key , erase it.  Else do nothing.\n  void Delete(const Slice  key);\n\n  // Clear all updates buffered in this batch.\n  void Clear();\n\n  // Support for iterating over the contents of a batch.\n  class Handler {\n   public:\n    virtual ~Handler();\n    virtual void Put(const Slice  key, const Slice  value) = 0;\n    virtual void Delete(const Slice  key) = 0;\n  };\n  Status Iterate(Handler* handler) const;\n\n public:\n  friend class WriteBatchInternal;\n\n  std::string rep_;  // See comment in write_batch.cc for the format of rep_\n\n  // Intentionally copyable\n};  WriteBatch \u63d0\u4f9b Put\u3001Delete\u3001Clear \u64cd\u4f5c\u3002\u53ef\u4ee5\u770b\u5230 rep_ \u5b58\u50a8\u7684\u65b9\u5f0f\u5229\u7528\u7684 std::string\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u4e0b\u5b58\u50a8\u7684\u7ed3\u6784\u3002     8byte  4byte  1byte  key's length (\u53d8\u957f)  key's value  value's length(\u53d8\u957f)  value       sequence  \u64cd\u4f5c\u6b21\u6570  \u64cd\u4f5c\u7c7b\u578b  key \u7684\u957f\u5ea6  key \u7684\u5185\u5bb9  value \u7684\u957f\u5ea6     \u8fd9\u91cc key value \u957f\u5ea6\u7684\u5199\u5165\u662f\u53ef\u53d8\u957f\u5ea6\u7684\uff0c\u4ee5\u4fbf\u8282\u7701\u7a7a\u95f4\u3002  char* EncodeVarint32(char* dst, uint32_t v) {\n  // Operate on characters as unsigneds\n  unsigned char* ptr = reinterpret_cast unsigned char* (dst);\n  static const int B = 128;\n  if (v   (1 7)) {\n    *(ptr++) = v;\n  } else if (v   (1 14)) {\n    *(ptr++) = v | B;\n    *(ptr++) = v 7;\n  } else if (v   (1 21)) {\n    *(ptr++) = v | B;\n    *(ptr++) = (v 7) | B;\n    *(ptr++) = v 14;\n  } else if (v   (1 28)) {\n    *(ptr++) = v | B;\n    *(ptr++) = (v 7) | B;\n    *(ptr++) = (v 14) | B;\n    *(ptr++) = v 21;\n  } else {\n    *(ptr++) = v | B;\n    *(ptr++) = (v 7) | B;\n    *(ptr++) = (v 14) | B;\n    *(ptr++) = (v 21) | B;\n    *(ptr++) = v 28;\n  }\n  return reinterpret_cast char* (ptr);\n}  \u4e3e\u4f8b\uff1a     0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  0x01 0x00 0x00 0x00  0x01  0x05  0x68 0x65 0x6C 0x6C 0x6F  0x05  0x77 0x6F 0x72 0x6C 0x64      sequence  \u64cd\u4f5c\u6b21\u6570  \u64cd\u4f5c\u7c7b\u578b(put)  key \u957f\u5ea6(5)  'hello'  value \u957f\u5ea6  \u2018world\u2019     LevelDB\u5199\u5165\u64cd\u4f5c\u5728\u51fd\u6570: Status DBImpl::Write(const WriteOptions  options, WriteBatch* my_batch)  \u4e3b\u8981\u6d41\u7a0b:  st= start: \u5f00\u59cb\ne= end: \u7ed3\u675f\nop= operation: \u5206\u914d\u8db3\u591f\u7684\u7a7a\u95f4\nop1= operation: \u5408\u5e76\u64cd\u4f5c\nop2= operation: \u5199\u5165\u65e5\u5fd7\nop3= operation: \u5199\u5165\u5185\u5b58\ncond= condition: \u786e\u8ba4\uff1f\n\nst- op- op1- op2- op3- e\ncond(yes)- e\ncond(no)- op  \u4e0b\u9762\u9010\u4e2a\u8bf4\u660e\u5404\u4e2a\u6d41\u7a0b:", 
            "title": "WriteBatch\u7c7b"
        }, 
        {
            "location": "/leveldb-write-flow/#_1", 
            "text": "\u4e3b\u8981\u5728  Status DBImpl::MakeRoomForWrite(bool force)  \u91cc\u9762\u3002\u96c6\u4e2d\u5728\u5404\u4e2a\u72b6\u6001\u7684\u5224\u65ad\u4e0a\u3002\u5206\u522b\u662f     level0\u6587\u4ef6\u662f\u5426\u8d85\u8fc7kL0_SlowdownWritesTrigger(8)\u4e2a\u6570\uff0c\u5982\u679c\u8d85\u8fc7\u5219\u7761\u77201000us, \u7b49\u5f85\u80cc\u666f\u7ebf\u7a0b\u5408\u5e76level0\u6587\u4ef6    \u5f53\u524d\u5185\u5b58\u8868\u6ee1\u4e86\uff0c\u5e76\u4e14imm \uff08\u4e0d\u53ef\u53d8\uff09\u5185\u5b58\u4ecd\u7136\u5728compacted\uff0c\u5219\u7b49\u5f85\u3002    \u5982\u679clevel0\u6587\u4ef6\u8d85\u8fc7kL0_StopWritesTrigger(12)\u6587\u4ef6\u5219\u7b49\u5f85    \u6700\u540e\u7684\u60c5\u51b5\u5c31\u662f\u5f53\u524d\u5185\u5b58\u8868\u6ee1\u4e86\uff0cimm(\u4e0d\u53ef\u53d8\u5185\u5b58\u8868\u6ca1\u6709\u6ee1\uff09\u5219\u8fdb\u884c\u5207\u6362\uff0c\u5e76\u89e6\u53d1compact\u540e\u53f0\u7ebf\u7a0b", 
            "title": "\u5206\u914d\u7a7a\u95f4"
        }, 
        {
            "location": "/leveldb-write-flow/#_2", 
            "text": "\u8fd9\u90e8\u5206\u4e3b\u8981\u662f\u63d0\u4ea4\u5f53\u524d\u7248\u672c\u53f7\u4ee5\u524d\u7684\u6570\u636e:    \u9996\u5148\uff0c\u5c06\u5f53\u524d\u7248\u672c\u53f7\u4ee5\u524d\u7684WriteBatch\u5408\u5e76\u4e3a\u4e00\u4e2aWriteBatch \u5e76\u4e14\u66f4\u65b0\u7248\u672c\u53f7+1    \u5199\u5165\u65e5\u5fd7\u6587\u4ef6    \u5199\u5165\u5185\u5b58\u8868    \u66f4\u65b0\u5f53\u524d\u7248\u672c\u53f7\u4e4b\u524d\u7684Writers\u961f\u5217\u4fe1\u606f\uff0cdone\u7684\u52a8\u4f5c\u7531false\u53d8\u4e3atrue\u3002    \u901a\u77e5\u5176\u5b83\u7ebf\u7a0b", 
            "title": "\u7ec4\u63d0\u4ea4"
        }, 
        {
            "location": "/leveldb-write-flow/#_3", 
            "text": "\u65e5\u5fd7\u6587\u4ef6\u662f\u6709block\u7ec4\u6210\u3002\u6bcf\u4e2ablock\u91cc\u9762\u5b58\u50a8\u591a\u6761\u65e5\u5fd7\u4fe1\u606f\u3002\u6bcf\u4e00\u6761\u65e5\u5fd7\u4fe1\u606f\u4e2a\u683c\u5f0f\u5982\u4e0b:     4 bytes  2 bytes  1 byte  n bytes      crc\u6821\u9a8c  \u6570\u636e\u957f\u5ea6  \u8bb0\u5f55\u7c7b\u578b  \u6570\u636e     \u524d7\u4f4d\u4e3aheader\u3002\u8bb0\u5f55\u7c7b\u578b\u6709\u4ee5\u4e0b\u51e0\u79cd:   kFullType  kFirstType  kMiddleType  kLastType   \u5bf9\u5e94\u5199\u5165block\u5185\u7684\u51e0\u79cd\u60c5\u51b5   block\u80fd\u591f\u5bb9\u7eb3\u4e00\u6761\u6570\u636e\u7684\u5199\u5165  block\u80fd\u5199\u5230\u6570\u636e\u7684\u4e00\u90e8\u5206  \u4e00\u6761\u6570\u636e\u6709\u53ef\u80fd\u5927\u4e8e\u4e00\u4e2ablock\u5927\u5c0f\uff0c\u5219\u5199\u5165\u6709\u53ef\u80fd\u4e00\u4e2ablock\u53ea\u5199\u4e86\u6570\u636e\u7684\u4e2d\u95f4\u90e8\u5206  block\u5199\u5165\u4e00\u6761\u6570\u636e\u7684\u5c3e\u90e8   \u5982\u679c\u4e00\u4e2ablock\u7684\u5269\u4f59\u7a7a\u95f4\u5c0f\u4e8ekHeaderSize\uff0c\u5219\u5269\u4f59\u8282\u75280x00\u586b\u5145\u3002\n\u4e0b\u9762\u7528\u5b9e\u9645\u4f8b\u5b50\u6765\u8bf4\u660e:\n\u6211\u4eec\u5411\u6587\u4ef6\u5199\u5165key:\u201chello\" value:\"world\"\u65e5\u5fd7\u4ea7\u751f\u5982\u4e0b 00000000  c8 d2 82 81 19 00 01 01  00 00 00 00 00 00 00 01  |................|\n00000010  00 00 00 01 05 68 65 6c  6c 6f 05 77 6f 72 6c 64  |.....hello.world|\n00000020  c8 d2 82 81  \u4e3aCRC\u6821\u9a8c 19 00  \u4e3a\u6570\u636e\u957f\u5ea6 01  \u4e3a\u8bb0\u5f55\u7c7b\u578b 00 00 00 00 00 00 00 01  \u4e3asequence 00 00 00 01  \u4e3acount 05 \u4e3akey\u957f\u5ea6 68 65 6c  6c 6f  \u4e3ahello 05 \u4e3avalue\u957f\u5ea6 77 6f 72 6c 64  \u4e3aworld", 
            "title": "\u65e5\u5fd7\u6587\u4ef6"
        }, 
        {
            "location": "/about/", 
            "text": "\u4e2a\u4eba\u7b80\u4ecb\n\n\n\u672c\u4eba\u4ece\u4e8bC++\u670d\u52a1\u5668\u540e\u53f0\u5f00\u53d1\uff0c\u559c\u6b22\u5206\u5e03\u5f0f\u3001\u6570\u636e\u5e93\u7b49", 
            "title": "About"
        }, 
        {
            "location": "/about/#_1", 
            "text": "\u672c\u4eba\u4ece\u4e8bC++\u670d\u52a1\u5668\u540e\u53f0\u5f00\u53d1\uff0c\u559c\u6b22\u5206\u5e03\u5f0f\u3001\u6570\u636e\u5e93\u7b49", 
            "title": "\u4e2a\u4eba\u7b80\u4ecb"
        }
    ]
}